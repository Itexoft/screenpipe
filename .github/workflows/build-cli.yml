name: Build CLI

on:
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          override: true
          cache: true
          target: ${{ matrix.target }}
          rustflags: ""
      - uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Cellar/ffmpeg
            /usr/local/Cellar/pkg-config
          key: ${{ runner.os }}-brew-${{ hashFiles('.github/workflows/build-cli.yml') }}
          restore-keys: |
            ${{ runner.os }}-brew-
      - run: brew unlink pkg-config@0.29.2 || true
      - run: brew install ffmpeg pkg-config
      - run: brew link --overwrite pkg-config
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          export PKG_CONFIG_PATH="/usr/local/opt/ffmpeg/lib/pkgconfig:$PKG_CONFIG_PATH"
          export PKG_CONFIG_ALLOW_CROSS=1
          export RUSTFLAGS="-C link-arg=-Wl,-rpath,@executable_path/../lib -C link-arg=-Wl,-rpath,@loader_path/../lib"
          cargo build --release --features metal --target ${{ matrix.target }}
      - run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo 0.0.0)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - run: |
          mkdir -p screenpipe-${{ env.VERSION }}-${{ matrix.target }}/bin
          cp target/${{ matrix.target }}/release/screenpipe screenpipe-${{ env.VERSION }}-${{ matrix.target }}/bin/
          tar -czf screenpipe-${{ env.VERSION }}-${{ matrix.target }}.tar.gz -C screenpipe-${{ env.VERSION }}-${{ matrix.target }} .
      - uses: actions/upload-artifact@v4
        with:
          name: screenpipe-macos-${{ matrix.target }}
          path: screenpipe-*.tar.gz

  build-windows:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
      - run: |
          Invoke-WebRequest https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-gnu/rustup-init.exe -OutFile rustup-init.exe
          .\rustup-init.exe -y
      - run: |
          $url = "https://7-zip.org/a/7z2301-x64.exe"
          $installer = "7z-installer.exe"
          Invoke-WebRequest -Uri $url -OutFile $installer
          Start-Process -FilePath .\$installer -Args "/S" -Wait
          Remove-Item $installer
          echo 'C:\\Program Files\\7-Zip' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: KyleMayes/install-llvm-action@v2
        with:
          version: "10.0"
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: windows-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          cargo build --release --target x86_64-pc-windows-msvc
      - shell: pwsh
        run: |
          $VERSION = git describe --tags --abbrev=0 2>$null
          if (-not $VERSION) { $VERSION = "0.0.0" }
          "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
      - shell: pwsh
        run: |
          $packageDir = "screenpipe-$env:VERSION-x86_64-pc-windows-msvc"
          New-Item -Path "$packageDir/bin" -ItemType Directory -Force
          Copy-Item "target/x86_64-pc-windows-msvc/release/screenpipe.exe" "$packageDir/bin/"
          Copy-Item "target/x86_64-pc-windows-msvc/release/onnxruntime.dll" "$packageDir/bin/" -ErrorAction SilentlyContinue
          7z a "$packageDir.zip" "./$packageDir/*"
      - uses: actions/upload-artifact@v4
        with:
          name: screenpipe-windows
          path: screenpipe-*.zip

  build-linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libasound2-dev libdbus-1-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libtesseract-dev libssl-dev cmake build-essential libx11-dev libxi-dev libxext-dev libxtst-dev libxrandr-dev libxinerama-dev libxcursor-dev libxdo-dev
      - uses: KyleMayes/install-llvm-action@v1
        with:
          version: "14.0"
      - run: echo "LIBCLANG_PATH=$(llvm-config --prefix)/lib" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: x86_64-unknown-linux-gnu-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo build --release --target x86_64-unknown-linux-gnu
      - run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo 0.0.0)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - run: |
          mkdir -p screenpipe-${{ env.VERSION }}-x86_64-unknown-linux-gnu/bin
          cp target/x86_64-unknown-linux-gnu/release/screenpipe screenpipe-${{ env.VERSION }}-x86_64-unknown-linux-gnu/bin/
          tar -czf screenpipe-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz -C screenpipe-${{ env.VERSION }}-x86_64-unknown-linux-gnu .
      - uses: actions/upload-artifact@v4
        with:
          name: screenpipe-linux-x86_64-unknown-linux-gnu
          path: screenpipe-*.tar.gz
